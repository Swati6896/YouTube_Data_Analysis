# -*- coding: utf-8 -*-
"""YouTube_Data_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FLON6qlWgncnuCiaRvqMh7Jaqg4IwQfY

1. Research Objective - Understanding the YouTube Landscape

2. About the dataset - Global Youtube Statistics, sourced from Kaggle [link](https://www.kaggle.com/datasets/nelgiriyewithana/global-youtube-statistics-2023)

##Data Wrangling

### Gathering Data
"""

# Importing Libraries

import numpy as np
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt

# Loading Data

df = pd.read_csv('Global YouTube Statistics.csv', encoding='windows-1254')

"""### Assessing Data"""

# Top of the dataset

df.head()

# Bottom of the dataset

df.tail()

#Checking on the shape of the data

df.shape

# Info

df. info()

#summary of the data

df. describe()

# Checking for duplicates

df.duplicated().sum()

# Checking for missing values

df.isnull().sum()

"""### Data Cleaning"""

# Drop Columns that I will not use for this analysis
# 'Gross tertiary education enrollment (%)', 'Population', 'Unemployment rate', 'Urban_population', 'Latitude', 'Longitude', 'subscribers_for_last_30_days'

df.drop(['Gross tertiary education enrollment (%)', 'Population', 'Unemployment rate', 'Urban_population', 'Latitude', 'Longitude', 'subscribers_for_last_30_days'], axis = 1, inplace = True)

# Replacing some missing vales with 'not available', all categorical columns
# 'category', 'Abbreviation', 'channel_type', 'Country'

df[['category', 'Abbreviation', 'channel_type', 'Country']] = df[['category', 'Abbreviation', 'channel_type', 'Country']].fillna('Not Available')

#Replacing missing values will the mode
# 'channel_type_rank', 'video_views_for_the_last_30_days', 'country_rank'

df['video_views_for_the_last_30_days'] = df['video_views_for_the_last_30_days'].fillna(df['video_views_for_the_last_30_days'].mode()[0])
df['country_rank'] = df['country_rank'].fillna(df['country_rank'].mode()[0])
df['channel_type_rank'] = df['channel_type_rank'].fillna(df['channel_type_rank'].mode()[0])

# Recheck missing values

df.isnull().sum()

# Drop remaining missing values
df.dropna(inplace = True)

# Change date columns to date type

df.created_date = pd.to_datetime(df.created_date)

# Check on Shape

df.shape

# Missing values

df.isnull().sum()

# Check on info
df.info()

"""## Exploring the Data"""

# Create a Copy

df_clean = df.copy()

# Preview column names

df_clean.columns

df_clean.head()

"""### Feature Engineering"""

# Creating a list of all countries in their different continents.

Africa = ["Algeria","Angola","Benin","Botswana","Burkina Faso","Burundi","Cabo Verde","Cameroon","Central African Republic",
          "Chad","Comoros","Congo, Dem. Rep", "Congo, Rep.","Cote d'Ivoire","Djibouti","Egypt","Equatorial Guinea","Eritrea",
          "Eswatini (formerly Swaziland)","Ethiopia","Gabon","Gambia","Ghana","Guinea","Guinea-Bissau","Kenya", "Lesotho",
          "Liberia",'Libya',"Madagascar","Malawi","Mali","Mauritania","Mauritius","Morocco","Mozambique","Namibia",
          "Niger","Nigeria","Rwanda","Sao Tome and Principe","Senegal","Seychelles","Sierra Leone","Somalia","South Africa",
          "South Sudan","Sudan","Tanzania""Togo","Tunisia","Uganda","Zambia","Zimbabwe"]

Europe = ["Albania","Andorra", "Armenia","Austria","Azerbaijan","Belarus","Belgium","Bosnia and Herzegovina",
          "Bulgaria","Croatia","Cyprus","Czechia","Denmark","Estonia","Finland","France","Georgia","Germany",
          "Greece","Hungary","Iceland","Ireland","Italy","Kazakhstan","Kosovo","Latvia","Liechtenstein","Lithuania",
          "Luxembourg","Malta","Moldova","Monaco","Montenegro","Netherlands","Macedonia, FYR","Norway","Poland","Portugal",
          "Romania","Russia","San Marino","Serbia","Slovakia","Slovenia","Spain","Sweden","Switzerland","Turkey",
          "Ukraine","United Kingdom","Vatican City"]

Asia = ["Afghanistan","Armenia","Azerbaijan","Bahrain","Bangladesh", "Bhutan","Brunei","Cambodia","China","Cyprus",
        "Georgia","India","Indonesia","Iran","Iraq","Israel","Japan","Jordan","Kazakhstan","Kuwait","Kyrgyzstan","Laos",
        "Lebanon","Malaysia","Maldives","Mongolia","Myanmar","Nepal","North Korea","Oman","Pakistan","Palestine","Philippines",
        "Qatar","Russia","Saudi Arabia","Singapore","South Korea","Sri Lanka","Syria","Taiwan","Tajikistan","Thailand",
        "Timor-Leste","Turkey","Turkmenistan","United Arab Emirates","Uzbekistan","Vietnam","Yemen"]

North_America = ["Antigua and Barbuda","Bahamas","Barbados","Belize","Canada","Costa Rica","Cuba","Dominica",
                 "Dominican Republic","El Salvador","Grenada","Guatemala","Haiti","Honduras","Jamaica","Mexico",
                 "Nicaragua","Panama","Saint Vincent and the Grenadines","United States"]

South_America = ["Argentina","Bolivia","Brazil","Chile","Colombia","Ecuador","Guyana","Paraguay","Peru","Suriname",
                 "Uruguay","Venezuela"]

Australia_and_Oceania = ["Australia","Fiji","Kiribati","Marshall Islands","Micronesia","Nauru","New Zealand","Palau",
                       "Papua New Guinea","Samoa","Solomon Islands","Tonga","Tuvalu","Vanuatu"]

# creating a function to fill the continent column with the appropriate continent of the country

def result(Country):
  if Country in Africa:
    return 'Africa'
  elif Country in Europe:
    return 'Europe'
  elif Country in Asia:
    return 'Asia'
  elif North_America:
    return 'North America'
  elif South_America:
    return 'South America'
  else:
    return 'Australia and Oceania'

# Applying the function into the df

df_clean['continent'] = df_clean.Country.apply(lambda x:result(x))

# Check if the change took effect
df_clean.head()

"""### Univariate Analysis"""

# What category have the most activity
base_color = sb.color_palette()[4]

#Visualisation
category = df_clean['category'].value_counts().index
sb.countplot(data = df_clean, y = 'category', color = base_color, order = category)

# What Countries have the highest amount of YT activity
'''
'rank', 'Youtuber', 'subscribers', 'video views', 'category', 'Title',
       'uploads', 'Country', 'Abbreviation', 'channel_type',
       'video_views_rank', 'country_rank', 'channel_type_rank',
       'video_views_for_the_last_30_days', 'lowest_monthly_earnings',
       'highest_monthly_earnings', 'lowest_yearly_earnings',
       'highest_yearly_earnings', 'created_year', 'created_month',
       'created_date'
'''
base_color = sb.color_palette()[5]
#Visualization
Country = df_clean['Country'].value_counts().head(20).index
sb.countplot(data = df_clean, y = 'Country', color = base_color, order = Country)

# What continent have the highest amount of YT activity

base_color = sb.color_palette()[6]
#Visualization
continent = df_clean['continent'].value_counts().head(20).index
sb.countplot(data = df_clean, y = 'continent', color = base_color, order = continent)

# Measures of Central tendancy Yearly earnings
mean_y = df_clean['highest_yearly_earnings'].mean()
median_y = df_clean['highest_yearly_earnings'].median()
mode_y = df_clean['highest_yearly_earnings'].mode()

print('Mean = '+str(mean_y))
print('Median = '+str(median_y))
print('Mode = '+str(mode_y))

# Step 1
# Measures of central tendency Monthly earnings

columns = [
   'rank', 'subscribers', 'video views', 'uploads', 'lowest_monthly_earnings',
   'highest_monthly_earnings', 'lowest_yearly_earnings','highest_yearly_earnings'
]

#Step 2
# Measures of Central tendancy Yearly earnings

for column in columns:
  print("\n\n")
  print(column, "mean is: "+ str(round(df_clean[column].mean(), 2)))
  print(column, "meadian is: "+ str(df_clean[column].median()))
  print(column, "mode is: " + str(df_clean[column].mode()))

# Distribution of subscribers
'''
 'rank', 'subscribers', 'video views', 'uploads', 'lowest_monthly_earnings',
   'highest_monthly_earnings', 'lowest_yearly_earnings','highest_yearly_earnings'
   '''
sb.distplot(df_clean['subscribers'])

# Distribution of uploads

def uni_viz(dataframe, column, bin=None):
  sb.distplot(dataframe[column])

  values = dataframe[column].value_counts(ascending = False)
  print('Top ten values for {} is:{}\n'.format(column, values.head(10).to_dict()))

  return values.head(5)

uni_viz(df_clean,'uploads')

# Distribution of yearly earnings
uni_viz(df_clean,'highest_yearly_earnings')

# Subscribers again
uni_viz(df_clean,'subscribers')

"""### Bivariate Analysis"""

# Relationship between Uploads and Subscribers

'''
 'rank', 'subscribers', 'video views', 'uploads', 'lowest_monthly_earnings',
   'highest_monthly_earnings', 'lowest_yearly_earnings','highest_yearly_earnings'
   '''
plt.scatter(data = df_clean, x='uploads' , y='subscribers' )
plt.xlabel('uploads')
plt.ylabel('subscribers')

# Relationship between Uploads and earnings

plt.scatter(data = df_clean, x='uploads' , y='highest_yearly_earnings' )
plt.xlabel('uploads')
plt.ylabel('highest_yearly_earnings')

# Relationship between Subscribers and Yearly earnings
plt.scatter(data = df_clean, x='highest_yearly_earnings' , y='subscribers' )
plt.xlabel('highest_yearly_earnings')
plt.ylabel('subscribers')

# Checking how our variables are corelated using a correlation matrix
matrix = df_clean.corr()
matrix

# Checking for correlation using a heatmap

fig, ax = plt.subplots(figsize=(15,10))

sb.heatmap(df_clean.corr(), annot=True, ax=ax)

"""### Multivariate Analysis"""

#Continent, subs, earnings

'''
 'rank', 'subscribers', 'video views', 'uploads', 'lowest_monthly_earnings',
   'highest_monthly_earnings', 'lowest_yearly_earnings','highest_yearly_earnings'
   '''

g = sb.FacetGrid(data=df_clean, col='continent', col_wrap = 3)
g.map(plt.scatter, 'subscribers', 'highest_yearly_earnings', alpha=0.25)
g.set_xlabels('subscribers')
g.set_ylabels('highest_yearly_earnings')
g.fig.set_size_inches(14,8);
plt.suptitle('Relationship between Subscribers and earnings at different continets'.title(), y=1, fontsize=14, weight='bold')
plt.show();